{"version":3,"sources":["lib/drawable-canvas.js","lib/number-recognition.js","index.js"],"names":["DrawableCanvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnMouseDown","bind","assertThisInitialized","handleOnTouchStart","handleOnMouseMove","handleOnTouchMove","handleonMouseUp","ctx","canvas","getContext","nextProps","clear","resetCanvas","clearRect","width","height","e","rect","getBoundingClientRect","beginPath","lastX","targetTouches","pageX","left","lastY","pageY","top","drawing","clientX","clientY","currentX","currentY","draw","drawImage","onGetImage","getImageData","lX","lY","cX","cY","newContext","strokeStyle","brushColor","lineWidth","moveTo","lineTo","stroke","_this2","react_default","a","createElement","ref","style","cursor","border","onMouseDown","onTouchStart","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","Component","NumberRecognition","state","predict","loadModel","tf","model","imageData","number","maxProb","img","fromPixels","reshape","output","predictions","Array","from","dataSync","forEach","prob","num","setState","onPredict","onClear","title","drawable_canvas_DrawableCanvas","onClick","buttonText","children","App","textAlign","number_recognition_NumberRecognition","predictedNumber","Fragment","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3d7bdc5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class DrawableCanvas extends Component {\n  constructor(props){\n    super(props);\n    this.handleOnMouseDown = this.handleOnMouseDown.bind(this);\n    this.handleOnTouchStart = this.handleOnTouchStart.bind(this);\n    this.handleOnMouseMove = this.handleOnMouseMove.bind(this);\n    this.handleOnTouchMove = this.handleOnTouchMove.bind(this);\n    this.handleonMouseUp = this.handleonMouseUp.bind(this);\n  }\n\n  componentDidMount(){\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  // FIXME: Replace to componentDidUpdate\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.clear){\n      this.resetCanvas();\n    }\n  }\n\n  resetCanvas(){\n    this.ctx.clearRect(\n      0, 0, this.ctx.canvas.width,   this.ctx.canvas.height\n    );\n  }\n\n   handleOnTouchStart (e) {\n    const rect = this.canvas.getBoundingClientRect();\n    this.ctx.beginPath();\n    \n    this.lastX = e.targetTouches[0].pageX - rect.left;\n    this.lastY = e.targetTouches[0].pageY - rect.top;\n    this.drawing = true;\n  }\n\n  handleOnMouseDown(e){\n    const rect = this.canvas.getBoundingClientRect();\n    this.ctx.beginPath();\n\n    this.lastX = e.clientX - rect.left;\n    this.lastY = e.clientY - rect.top;\n    this.drawing = true;\n  }\n\n  handleOnTouchMove (e) {\n    if (this.drawing) {\n      const rect = this.canvas.getBoundingClientRect();\n      const lastX = this.lastX;\n      const lastY = this.lastY;\n      let currentX = e.targetTouches[0].pageX - rect.left;\n      let currentY = e.targetTouches[0].pageY - rect.top;\n      this.draw(lastX, lastY, currentX, currentY);\n      this.lastX = currentX;\n      this.lastY = currentY;\n    }\n  }\n\n  handleOnMouseMove(e){\n    if(this.drawing){\n      const rect = this.canvas.getBoundingClientRect();\n      const lastX = this.lastX;\n      const lastY = this.lastY;\n      let currentX = e.clientX - rect.left;\n      let currentY = e.clientY - rect.top;\n\n      this.draw(lastX, lastY, currentX, currentY);\n      this.lastX = currentX;\n      this.lastY = currentY;\n    }\n  }\n\n  handleonMouseUp() {\n    this.ctx.drawImage(this.canvas, 0, 0, 28, 28);\n    this.drawing = false;\n\n    if(typeof this.props.onGetImage === 'function'){\n      this.props.onGetImage(this.ctx.getImageData(0, 0, 28, 28));\n    }\n  }\n\n  draw(lX, lY, cX, cY) {\n    const newContext = this.ctx;\n    newContext.strokeStyle = this.props.brushColor;\n    newContext.lineWidth = this.props.lineWidth;\n    this.ctx =  newContext;\n    this.ctx.moveTo(lX, lY);\n    this.ctx.lineTo(cX, cY);\n    this.ctx.stroke();\n  }\n\n  render() {\n    const style = {\n      cursor: 'crosshair',\n      border: '1px black solid',\n    };\n\n    return (\n        <canvas \n          ref={(canvas) => {this.canvas = canvas; }}\n          width={this.props.width}\n          style={style}\n          height={this.props.height}\n          onMouseDown = {this.handleOnMouseDown}\n          onTouchStart = {this.handleOnTouchStart}\n          onMouseMove = {this.handleOnMouseMove}\n          onTouchMove = {this.handleOnTouchMove}\n          onMouseUp = {this.handleonMouseUp}\n          onTouchEnd = {this.handleonMouseUp}\n        />\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport DrawableCanvas from './drawable-canvas';\n\nconst DEFAULT_WIDTH = 400;\nconst DEFAULT_HEIGHT = 400;\nconst DEFAULT_BUTTON_TEXT = 'Clear';\nconst DEFAULT_TITLE = 'Draw a number (0-9) here:';\n\nexport default class NumberRecognition extends Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n    this.predict = this.predict.bind(this);\n    this.clear = this.clear.bind(this);\n    this.loadModel();\n  }\n\n  async loadModel(){\n    this.model = await tf.loadLayersModel('./assets/model.json');\n  }\n\n  async predict(imageData) {\n    if(!this.model){\n        return;\n    }\n\n    await tf.tidy(() => {\n      let maxProb = 0;\n      let number;\n      let img = tf.browser.fromPixels(imageData, 1);\n      img = img.reshape([1, 28, 28, 1]);\n      img = tf.cast(img, 'float32');\n    \n      const output = this.model.predict(img);\n      const predictions = Array.from(output.dataSync());\n        \n      predictions.forEach((prob, num) => {\n        if(prob > maxProb){\n            maxProb = prob;\n            number = num;\n        }\n      });\n      this.setState({ number, predictions, clear: false });\n\n      if(typeof this.props.onPredict === 'function'){\n        this.props.onPredict(number, predictions);\n      }\n    });\n  }\n\n  clear(){\n    this.setState({\n      clear: true,\n    });\n\n    if(typeof this.props.onClear === 'function'){\n      this.props.onClear();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h5>{this.props.title || DEFAULT_TITLE}</h5>\n        <div>\n          <DrawableCanvas \n            brushColor={'grey'}\n            clear={this.state.clear}\n            height={this.props.height || DEFAULT_HEIGHT}\n            lineWidth={25}\n            onGetImage={this.predict}\n            width={this.props.width || DEFAULT_WIDTH}\n          />\n        </div>\n        <button onClick={this.clear}>\n            {this.props.buttonText || DEFAULT_BUTTON_TEXT}\n        </button>\n        {\n          this.props.children\n            ? this.props.children(\n                this.state.number, \n                this.state.predictions\n              )\n            : null\n        }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport NumberRecognition from './lib/number-recognition';\nimport './style.css';\n\nconst CANVAS_WIDTH = 400;\nconst CANVAS_HEIGHT = 400;\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{ textAlign: 'center'}}>\n        <h4>\n           Using a trained MNIST Keras model, with Tensorflow.js and React.js\n        </h4>\n\n        <NumberRecognition\n           width={CANVAS_WIDTH}\n           height={CANVAS_HEIGHT}\n        >\n        {\n          (predictedNumber, predictions) => (\n            <>\n              <h4>Predicted number:</h4>\n              <h2>{predictedNumber}</h2>\n            </>\n          )\n        }\n        </NumberRecognition>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}